{
	"classNameTemplate": "[[configuratorName]].java",
	"codeTemplate": 
		"package ru.avs.express.android.ui.screen.[[screenPackageName]];


		import android.content.Context;
		import android.os.Bundle;
		import android.content.Intent;

		import ru.avs.express.android.app.dagger.AppComponent;
		import ru.avs.express.android.app.dagger.scope.PerScreen;
		import ru.avs.express.android.ui.base.dagger.ActivityScreenModule;
		import ru.avs.express.android.ui.base.dagger.CustomScreenModule;
		import ru.avs.express.android.ui.base.screen.configurator.ActivityScreenConfigurator;
		import ru.avs.express.android.ui.base.screen.view.ScreenComponent;
		import ru.avs.express.android.ui.base.dagger.FragmentScreenModule;
        import ru.avs.express.android.ui.base.screen.configurator.FragmentScreenConfigurator;

		import dagger.Component;
		import dagger.Module;

		/**
		* Конфигуратор экрана [[humanScreenName]]
		*/
		class [[configuratorName]] extends [[screenTypeName]]ScreenConfigurator {

		    @PerScreen
		    @Component(dependencies = AppComponent.class, modules = {[[screenTypeName]]ScreenModule.class[[screenModuleRegistration]]})
		    interface [[screenName]]ScreenComponent extends ScreenComponent<[[viewName]]> {
		    }
		    [[screenModule]]

		    public [[configuratorName]](Context context, [[rawScreenInputParameterType]] [[rawScreenInputParameterName]]) {
		        super(context, [[rawScreenInputParameterName]]);
		    }

		    @Override
		    protected ScreenComponent createScreenComponent(AppComponent appComponent,
		                                                    [[screenTypeName]]ScreenModule [[screenTypeNameLowerCase]]ScreenModule,
		                                                    [[rawScreenInputParameterType]] [[rawScreenInputParameterName]]) {
		        return Dagger[[screenName]]ScreenConfigurator_[[screenName]]ScreenComponent.builder()
		                .appComponent(appComponent)[[screenModuleCreation]]
		                .[[screenTypeNameLowerCase]]ScreenModule([[screenTypeNameLowerCase]]ScreenModule)
		                .build();
		    }

		    @Override
		    public String getName() {
		        return \"[[screenName]]\";
		    }

		}",



	"parts" : [
		{
			"name": "classPackageName",
			"values": [
				{
					"value" : ""
				}
			]
		},
		{
			"name": "screenModuleRegistration",
			"values": [
				{
					"cfg" : [
						{
							"key" : "hasInputParams",
						 	"value" : "true"
					 	}
					],
					"value" : ", [[screenName]]ScreenModule.class"
				}
			]
		},
		{
			"name": "screenModuleCreation",
			"values": [
				{
					"cfg" : [
						{
							"key" : "hasInputParams",
						 	"value" : "true"
					 	}
					],
					"value" : "
                .[[screenNameLowerCase]]ScreenModule(new [[screenName]]ScreenModule(new [[routeName]]([[rawScreenInputParameterName]])))"
				}
			]
		},
		{
			"name": "screenModule",
			"values": [
				{
					"cfg" : [
						{
							"key" : "hasInputParams",
						 	"value" : "true"
					 	}
					],
					"value" : 
						"

					    @Module
					    public static class [[screenName]]ScreenModule extends CustomScreenModule<[[routeName]]>{
					        public [[screenName]]ScreenModule([[routeName]] route) {
					            super(route);
					        }
					    }"
				}
			]
		}

		
	]
}
